var i=class{#e;constructor(e){this.#e=e}name(){return this.#e.name}size(){return this.#e.size}async arrayBuffer(e,n){return await this.#e.slice(e,n).arrayBuffer()}};window.addEventListener("error",t=>{let e=new i({});alert(`${t.message}, ${e}`)});function c(){return new Promise(t=>{let e=document.createElement("input");e.type="file",e.onchange=n=>{let r=Array.from(e.files);t(r[0])},e.click()})}function f(){setTimeout(u),c().then(function(t){document.querySelector("p#file-name").innerText=t&&t.name||"no file selected",t.name.endsWith(".mp3")?(mp3=new Mp3File(t),mp3.child().then(e=>{let n=document.querySelector("div.struct");n.innerHTML="",e.forEach(r=>n.innerHTML+=s(r))})):readTableDirectory(t).then(e=>{document.querySelector("div.struct").innerHTML=s(e);let n=[...e.records];n=n.sort(function(r,o){return r.offset-o.offset});for(let r of n)document.querySelector("div.struct").innerHTML+=s({name:names[r.tag]||r.tag,offset:r.offset,size:r.length})})})}function u(){document.querySelector("p#file-name").innerText="no file selected",document.querySelector("div.struct").innerHTML=""}function s(t){return`
        <div class=struct-block>
            <div class=struct-header>${t.name}</div>
            <div class=struct-size>size: ${t.size}</div>
            <div class=struct-offset>offset: ${t.offset}</div>
        </div>`}export{s as blockView,u as clear,f as onClick,c as selectFile};
